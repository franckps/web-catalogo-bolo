{"ast":null,"code":"var _jsxFileName = \"/root/\\xC1rea de trabalho/Sistema Patricia/frontend/src/AdminComponents/AdminUpdateBolo/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport './styles.css';\nimport api from '../../services/api';\nimport Header from '../AdminHeader';\nimport Body from '../AdminBody';\nimport Formulario from '../../components/Formulario';\n\nfunction UpdateBolo({\n  match\n}) {\n  const [sabores, setSabores] = useState([]);\n  const [bolo, setBolo] = useState({});\n\n  async function initializeSabores() {\n    const request = await api.get('sabor');\n\n    if (request.data) {\n      setSabores(request.data);\n    }\n  }\n\n  useEffect(() => {\n    api.get(`bolo/${match.params.id}`).then(requestBolos => {\n      if (!!requestBolos.data) {\n        setBolo(requestBolos.data);\n        initializeSabores();\n      }\n    });\n  });\n\n  async function handleSubmit(event) {\n    event = event ? event : window.event;\n    event.preventDefault();\n    const formulario = event.target;\n    let {\n      nome,\n      quantidade,\n      descricao,\n      s\n    } = formulario;\n    nome = nome.value;\n    quantidade = quantidade.value;\n    descricao = descricao.value;\n    let checkedSabores = s.value ? s.checked ? [s.value] : [] : [...s].filter(element => !!element.checked).map(element => element.value);\n    checkedSabores = checkedSabores.join(',');\n    if (!nome || !quantidade || !descricao) return alert(\"Os campos 'nome', 'quantidade' e 'descricao' são obrigatórios\");\n    let newForm = new FormData(formulario);\n    newForm.append('sabor', checkedSabores);\n    let request = await api.put(`bolo/${match.params.id}`, newForm);\n    if (!!request.data) return alert(\"Dados atualizados!\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    buscarId: \"buscar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, bolo && /*#__PURE__*/React.createElement(Formulario, {\n    image: true,\n    onSubmit: handleSubmit,\n    imageURL: bolo.imagem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"nome\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }, \"Nome do bolo:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"nome\",\n    name: \"nome\",\n    placeholder: \"Defina o nome do bolo\",\n    value: bolo.nome,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"quantidade\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, \"Quantidade:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    id: \"quantidade\",\n    name: \"quantidade\",\n    placeholder: \"Informe a quantidade em estoque\",\n    value: bolo.quantidade,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"descricao\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }, \"Descri\\xE7\\xE3o do bolo:\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"descricao\",\n    name: \"descricao\",\n    placeholder: \"Descreva o bolo\",\n    value: bolo.descricao,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  })), sabores[0] && /*#__PURE__*/React.createElement(\"fieldset\", {\n    className: \"sabores\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    style: {\n      backgroundColor: '#ccc'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  }, \"Escolha os sabores\"), sabores.map(element => /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    key: element.id,\n    type: \"checkbox\",\n    name: \"s\",\n    value: element.id\n  }, bolo.caracteristicas.map(elm => elm.id).includes(element.id) ? {\n    checked: true\n  } : '', {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 19\n    }\n  }, element.nome)))), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, \"Cadastrar\")))));\n}\n\nexport default UpdateBolo;","map":{"version":3,"sources":["/root/Área de trabalho/Sistema Patricia/frontend/src/AdminComponents/AdminUpdateBolo/index.js"],"names":["React","useEffect","useState","api","Header","Body","Formulario","UpdateBolo","match","sabores","setSabores","bolo","setBolo","initializeSabores","request","get","data","params","id","then","requestBolos","handleSubmit","event","window","preventDefault","formulario","target","nome","quantidade","descricao","s","value","checkedSabores","checked","filter","element","map","join","alert","newForm","FormData","append","put","imagem","backgroundColor","caracteristicas","elm","includes"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport './styles.css';\r\n\r\nimport api from '../../services/api'\r\n\r\nimport Header from '../AdminHeader'\r\nimport Body from '../AdminBody'\r\nimport Formulario from '../../components/Formulario'\r\n\r\nfunction UpdateBolo({ match }) {\r\n  const [sabores, setSabores] = useState([])\r\n  const [bolo, setBolo] = useState({})\r\n\r\n  async function initializeSabores() {\r\n    const request = await api.get('sabor');\r\n    if(request.data){\r\n        setSabores(request.data);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    api.get(`bolo/${ match.params.id }`).then(requestBolos => {\r\n      if(!!requestBolos.data){\r\n          setBolo(requestBolos.data);\r\n          initializeSabores();\r\n      }\r\n    })\r\n  })\r\n\r\n  async function handleSubmit(event) {\r\n    event = event? event : window.event;\r\n    event.preventDefault();\r\n\r\n    const formulario = event.target;\r\n    let { nome, quantidade, descricao, s } = formulario;\r\n\r\n    nome = nome.value; quantidade = quantidade.value; descricao = descricao.value;\r\n    let checkedSabores = s.value? \r\n      s.checked? [s.value] : [] : \r\n      [...s]\r\n      .filter(element => !!element.checked)\r\n      .map(element => element.value);\r\n\r\n    checkedSabores = checkedSabores.join(',');\r\n\r\n    if(!nome || !quantidade || !descricao) \r\n      return alert(\"Os campos 'nome', 'quantidade' e 'descricao' são obrigatórios\");\r\n\r\n    let newForm = new FormData(formulario);\r\n    newForm.append('sabor',checkedSabores);\r\n\r\n    let request = await api.put(`bolo/${ match.params.id }`, newForm);\r\n\r\n    if(!!request.data)\r\n      return alert(\"Dados atualizados!\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header buscarId=\"buscar\"/>\r\n      <Body>\r\n        {bolo &&\r\n        <Formulario image={ true } onSubmit={ handleSubmit } imageURL={ bolo.imagem } >\r\n          <p>\r\n              <label for=\"nome\">Nome do bolo:</label>\r\n              <input type=\"text\" id=\"nome\" name=\"nome\" placeholder=\"Defina o nome do bolo\" value={bolo.nome} />\r\n          </p>\r\n          <p>\r\n              <label for=\"quantidade\">Quantidade:</label>\r\n              <input type=\"number\" id=\"quantidade\" name=\"quantidade\" placeholder=\"Informe a quantidade em estoque\" value={bolo.quantidade} />\r\n          </p>\r\n          <p>\r\n              <label for=\"descricao\">Descrição do bolo:</label>\r\n              <textarea id=\"descricao\" name=\"descricao\" placeholder=\"Descreva o bolo\" value={bolo.descricao} ></textarea>\r\n          </p>\r\n\r\n          { sabores[0] &&\r\n            <fieldset className=\"sabores\">\r\n              <legend style={{backgroundColor: '#ccc'}}>Escolha os sabores</legend>\r\n              {sabores.map(element => (\r\n                <label>\r\n                  <input key={element.id} type=\"checkbox\" name=\"s\" value={element.id} { ...bolo.caracteristicas.map(elm => elm.id).includes(element.id)? {checked: true} : '' } />\r\n                  <span>{element.nome}</span>\r\n                </label>\r\n              ))}\r\n            </fieldset>\r\n          }\r\n\r\n          <p>\r\n              <button>Cadastrar</button>\r\n          </p>\r\n        </Formulario>\r\n        }\r\n      </Body>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UpdateBolo;\r\n"]},"metadata":{},"sourceType":"module"}