{"ast":null,"code":"var _jsxFileName = \"/root/\\xC1rea de trabalho/Sistema Patricia/frontend/src/AdminComponents/AdminUpdateBolo/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport './styles.css';\nimport api from '../../services/api';\nimport Header from '../AdminHeader';\nimport Body from '../AdminBody';\nimport Formulario from '../../components/Formulario';\n\nfunction UpdateBolo({\n  match\n}) {\n  const [sabores, setSabores] = useState([]);\n  const [bolo, setBolo] = useState({});\n  const [saboresEscolhidos, setSaboresEscolhidos] = useState([]);\n\n  async function initializeSabores() {\n    const request = await api.get('sabor');\n\n    if (request.data) {\n      setSabores(request.data);\n    }\n  }\n\n  async function initializeBolos() {\n    const requestBolos = await api.get(`bolo/${match.params.id}`);\n\n    if (!!requestBolos.data) {\n      setBolo(requestBolos.data);\n      setSaboresEscolhidos(requestBolos.data.caracteristicas);\n      initializeSabores();\n    }\n  }\n\n  useEffect(() => {\n    initializeBolos();\n  });\n\n  function toggleSabor(id) {\n    alert(\"Mudou\");\n    let newSabores = [];\n    if (saboresEscolhidos.map(elm => elm.id).includes(id)) newSabores = saboresEscolhidos.filter(element => element.id !== id);else {\n      newSabores = saboresEscolhidos;\n      newSabores.push({\n        id\n      });\n    }\n    console.log(newSabores);\n    console.log(saboresEscolhidos);\n    setSaboresEscolhidos(newSabores);\n    initializeSabores();\n  }\n\n  async function handleSubmit(event) {\n    event = event ? event : window.event;\n    event.preventDefault();\n    const formulario = event.target;\n    let {\n      nome,\n      quantidade,\n      descricao,\n      s\n    } = formulario;\n    nome = nome.value;\n    quantidade = quantidade.value;\n    descricao = descricao.value;\n    let checkedSabores = s.value ? s.checked ? [s.value] : [] : [...s].filter(element => !!element.checked).map(element => element.value);\n    checkedSabores = checkedSabores.join(',');\n    if (!nome || !quantidade || !descricao) return alert(\"Os campos 'nome', 'quantidade' e 'descricao' são obrigatórios\");\n    let newForm = new FormData(formulario);\n    newForm.append('sabor', checkedSabores);\n    let request = await api.put(`bolo/${match.params.id}`, newForm);\n    if (!!request.data) return alert(\"Dados atualizados!\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    buscarId: \"buscar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, bolo && /*#__PURE__*/React.createElement(Formulario, {\n    image: true,\n    onSubmit: handleSubmit,\n    imageURL: bolo.imagem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"nome\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, \"Nome do bolo:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"nome\",\n    name: \"nome\",\n    placeholder: \"Defina o nome do bolo\",\n    value: bolo.nome,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"quantidade\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, \"Quantidade:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    id: \"quantidade\",\n    name: \"quantidade\",\n    placeholder: \"Informe a quantidade em estoque\",\n    value: bolo.quantidade,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"descricao\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, \"Descri\\xE7\\xE3o do bolo:\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"descricao\",\n    name: \"descricao\",\n    placeholder: \"Descreva o bolo\",\n    value: bolo.descricao,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  })), sabores[0] && /*#__PURE__*/React.createElement(\"fieldset\", {\n    className: \"sabores\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    style: {\n      backgroundColor: '#ccc'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  }, \"Escolha os sabores\"), sabores.map(element => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    onClick: () => toggleSabor(element.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 19\n    }\n  }, element.nome)), /*#__PURE__*/React.createElement(\"input\", {\n    key: element.id,\n    type: \"checkbox\",\n    name: \"s\",\n    value: element.id,\n    checked: !!saboresEscolhidos.map(elm => elm.id).includes(element.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  })))), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, \"Cadastrar\")))));\n}\n\nexport default UpdateBolo;","map":{"version":3,"sources":["/root/Área de trabalho/Sistema Patricia/frontend/src/AdminComponents/AdminUpdateBolo/index.js"],"names":["React","useEffect","useState","api","Header","Body","Formulario","UpdateBolo","match","sabores","setSabores","bolo","setBolo","saboresEscolhidos","setSaboresEscolhidos","initializeSabores","request","get","data","initializeBolos","requestBolos","params","id","caracteristicas","toggleSabor","alert","newSabores","map","elm","includes","filter","element","push","console","log","handleSubmit","event","window","preventDefault","formulario","target","nome","quantidade","descricao","s","value","checkedSabores","checked","join","newForm","FormData","append","put","imagem","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport './styles.css';\r\n\r\nimport api from '../../services/api'\r\n\r\nimport Header from '../AdminHeader'\r\nimport Body from '../AdminBody'\r\nimport Formulario from '../../components/Formulario'\r\n\r\nfunction UpdateBolo({ match }) {\r\n  const [sabores, setSabores] = useState([])\r\n  const [bolo, setBolo] = useState({})\r\n  const [saboresEscolhidos, setSaboresEscolhidos] = useState([])\r\n\r\n  async function initializeSabores() {\r\n    const request = await api.get('sabor');\r\n    if(request.data){\r\n        setSabores(request.data);\r\n    }\r\n  }\r\n\r\n  async function initializeBolos() {\r\n    const requestBolos = await api.get(`bolo/${ match.params.id }`);\r\n\r\n    if(!!requestBolos.data){\r\n        setBolo(requestBolos.data);\r\n        setSaboresEscolhidos(requestBolos.data.caracteristicas);\r\n        initializeSabores();\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    initializeBolos()\r\n  })\r\n\r\n  function toggleSabor(id) {\r\n    alert(\"Mudou\")\r\n    let newSabores = []\r\n    if(saboresEscolhidos.map(elm => elm.id).includes(id))\r\n      newSabores = saboresEscolhidos.filter(element => element.id !== id)\r\n    else {\r\n      newSabores = saboresEscolhidos;\r\n      newSabores.push({id})\r\n    }\r\n\r\n    console.log(newSabores)\r\n    console.log(saboresEscolhidos)\r\n    \r\n    setSaboresEscolhidos(newSabores);\r\n    initializeSabores();\r\n  }\r\n\r\n  async function handleSubmit(event) {\r\n    event = event? event : window.event;\r\n    event.preventDefault();\r\n\r\n    const formulario = event.target;\r\n    let { nome, quantidade, descricao, s } = formulario;\r\n\r\n    nome = nome.value; quantidade = quantidade.value; descricao = descricao.value;\r\n    let checkedSabores = s.value? \r\n      s.checked? [s.value] : [] : \r\n      [...s]\r\n      .filter(element => !!element.checked)\r\n      .map(element => element.value);\r\n\r\n    checkedSabores = checkedSabores.join(',');\r\n\r\n    if(!nome || !quantidade || !descricao) \r\n      return alert(\"Os campos 'nome', 'quantidade' e 'descricao' são obrigatórios\");\r\n\r\n    let newForm = new FormData(formulario);\r\n    newForm.append('sabor',checkedSabores);\r\n\r\n    let request = await api.put(`bolo/${ match.params.id }`, newForm);\r\n\r\n    if(!!request.data)\r\n      return alert(\"Dados atualizados!\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header buscarId=\"buscar\"/>\r\n      <Body>\r\n        {bolo &&\r\n        <Formulario image={ true } onSubmit={ handleSubmit } imageURL={ bolo.imagem } >\r\n          <p>\r\n              <label for=\"nome\">Nome do bolo:</label>\r\n              <input type=\"text\" id=\"nome\" name=\"nome\" placeholder=\"Defina o nome do bolo\" value={bolo.nome} />\r\n          </p>\r\n          <p>\r\n              <label for=\"quantidade\">Quantidade:</label>\r\n              <input type=\"number\" id=\"quantidade\" name=\"quantidade\" placeholder=\"Informe a quantidade em estoque\" value={bolo.quantidade} />\r\n          </p>\r\n          <p>\r\n              <label for=\"descricao\">Descrição do bolo:</label>\r\n              <textarea id=\"descricao\" name=\"descricao\" placeholder=\"Descreva o bolo\" value={bolo.descricao} ></textarea>\r\n          </p>\r\n\r\n          { sabores[0] &&\r\n            <fieldset className=\"sabores\">\r\n              <legend style={{backgroundColor: '#ccc'}}>Escolha os sabores</legend>\r\n              {sabores.map(element => (\r\n                <>\r\n                <label onClick={() => toggleSabor(element.id)}>\r\n                  <span>{element.nome}</span>\r\n                </label>\r\n                <input key={element.id} type=\"checkbox\" name=\"s\" value={element.id} checked={ !!(saboresEscolhidos.map(elm => elm.id).includes(element.id)) } />\r\n                </>\r\n              ))}\r\n            </fieldset>\r\n          }\r\n\r\n          <p>\r\n              <button>Cadastrar</button>\r\n          </p>\r\n        </Formulario>\r\n        }\r\n      </Body>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UpdateBolo;\r\n"]},"metadata":{},"sourceType":"module"}